networks:
  chat-auth-node:
    driver: bridge
  observability:
    driver: bridge

services:
  postgres-chat-auth:
    image: postgres
    restart: always
    ports:
      - 5432:5432
    container_name: postgres-chat-auth
    volumes:
      - ./tmp/database/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres-chat-auth
      POSTGRES_PASSWORD: postgres-chat-auth
      POSTGRES_DB: chat-auth
    networks:
      - chat-auth-node
      - observability
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    extra_hosts:
      - host.docker.internal:host-gateway
  mongo-chat-auth:
    image: mongo
    restart: always
    container_name: mongo-chat-auth
    ports:
      - 27017:27017
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "'db.runCommand('ping').ok'", "--quiet"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - chat-auth-node
      - observability
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo-chat-auth
      MONGO_INITDB_ROOT_PASSWORD: mongo-chat-auth
      MONGO_INITDB_DATABASE: chat-auth
    volumes:
      - ./tmp/database/mongo:/data/db
    extra_hosts:
      - host.docker.internal:host-gateway
  redis-auth-node:
    image: redis
    restart: always
    container_name: redis-auth-node
    ports:
      - 6379:6379
    networks:
      - chat-auth-node
      - observability
    volumes:
      - ./tmp/database/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    extra_hosts:
      - host.docker.internal:host-gateway
  chat-auth-node:
    build:
      context: .
      dockerfile: ./.docker/dockerfiles/Dockerfile
    entrypoint: sh ./.docker/entrypoints/entrypoint-dev.sh
    container_name: chat-auth-node
    ports:
      - 3000:3000
      - 5555:5555  # For prisma studio
    volumes:
      - .:/usr/chat-auth-node/app
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "bash", "-c", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      NODE_ENV: development
      PORT: 3000
      MONGO_HOST: host.docker.internal
      MONGO_PORT: 27017
      MONGO_OPTIONS: "?authSource=admin"
      MONGO_PASSWORD: mongo-chat-auth
      MONGO_USER: mongo-chat-auth
      MONGO_DB: chat-auth
      DATABASE_URL: "postgresql://postgres-chat-auth:postgres-chat-auth@host.docker.internal:5432/chat-auth?schema=public"
      MONGO_URI_TEST: "mongodb://mongo-chat-auth:mongo-chat-auth@host.docker.internal:27017/test?authSource=admin"
      REDIS_URL: "redis://host.docker.internal:6379"
      JWT_SECRET: "secret"
      JWT_ISSUER: "chat-auth-node"
      SALT_HASHER: 11
    networks:
      - chat-auth-node
      - observability
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      - postgres-chat-auth
      - mongo-chat-auth
      - redis-auth-node